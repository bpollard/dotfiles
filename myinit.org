#+title My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+STARTUP: overview

* General Emacs Configuration
** Setup Package and Configure Melpa

   #+begin_src emacs-lisp

   (require 'package)
   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("elpa" . "https://elpa.gnu.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")))
   (package-initialize)
   (unless package-archive-contents
     (package-refresh-contents))

   #+end_src
   
** Install and Configure Use-Package

   #+begin_src emacs-lisp

   (unless (package-installed-p 'use-package)
   (package-install 'use-package))

   (require 'use-package)
   (setq use-package-always-ensure t)
 
   #+end_src

** Interface Tweaks

   #+begin_src emacs-lisp
 
   (scroll-bar-mode -1)
   (tool-bar-mode -1)
   (set-fringe-mode 3)   ; Adjusts space on the left and right
   (menu-bar-mode -1)
   ;;(setq visible-bell t) ; Might be annoying in Mac. How to do an if here?

   #+end_src
  
** Font

   #+begin_src emacs-lisp

   (set-face-attribute 'default nil :font "Fira Code Retina" :height 150)

   #+end_src
  
** Line Numbers

   #+begin_src emacs-lisp

   (column-number-mode)
   (global-display-line-numbers-mode t)
   ;;(dolist (mode '(text-mode-hook
   ;;                prog-mode-hook
   ;;                conf-mode-hook))
   ;;  (add-hook mode (lambda () (display-line-numbers-mode 1))))
   ;;  
   ;;;; Not sure this is needed. "Override some modes which derive from the above"
   ;;(dolist (mode '(org-mode-hook))
   ;;(add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src
   
** Doom Modeline

   #+begin_src emacs-lisp

   (use-package all-the-icons)
   (use-package doom-modeline
     :hook (after-init . doom-modeline-mode))

   #+end_src
   
** Doom Theme
   #+begin_src emacs-lisp

   (use-package doom-themes
     :config
     (setq doom-themes-enable-bold t
           doom-themes-enable-italic t)
     (load-theme 'doom-palenight t)
     (doom-themes-org-config))

   #+end_src

** Rainbow Delimiters

   #+begin_src emacs-lisp

   (use-package rainbow-delimiters
     :hook (prog-mode . rainbow-delimiters-mode))

   #+end_src

** Beacon
   #+begin_src emacs-lisp
   (use-package beacon
   :config (beacon-mode 1))
   #+end_src
* Org Mode
** Org Mode

  #+begin_src emacs-lisp
  
  ;; Org for the win!!
  (use-package org
    :config
    (setq org-ellipsis " ▾"
      org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-colum 60)

    ;; Save all org buffers if we've refiled
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-agenda-files
        '("~/Dropbox/org/work.org")))

  #+end_src
  
** Org Bullets
   
   #+begin_src emacs-lisp

    ;; Use better bullets
    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  #+end_src
  
** Tangle on Save

   #+begin_src emacs-lisp

   #+end_src
   
* Helm

  #+begin_src emacs-lisp

  (use-package helm
    :config
    (progn
      (helm-mode 1)
      (require 'helm-config)
      (global-set-key (kbd "M-x") #'helm-M-x)
      (global-set-key (kbd "C-x C-f") #'helm-find-files)))
 
  #+end_src
  
* Tools
** Be Evil

  #+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-intergration nil)
    :config
    (evil-mode 1))
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Collections of Evils
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
 
  #+end_src
  
** Magit

  #+begin_src emacs-lisp
 
  (use-package magit)
  ;;:custom
  ;;(magit-display-buffer-function #'magit-display-same-window-except-diff-v1))

  (use-package forge
    :after magit)
 
  #+end_src

** Hydra

  #+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
  "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
 
  #+end_src
  
** LSP

   #+begin_src emacs-lisp
 
   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :init
     (setq lsp-keymap-prefix "C-c l")
     :config
     (lsp-enable-which-key-integration t))
 
   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))
 
   #+end_src
   
** Company

   #+begin_src emacs-lisp

   (use-package company
     :after lsp-mode
     :hook (prog-mode . company-mode)
     :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
     :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0))

   #+end_src
* Development
** Debugging

   #+begin_src emacs-lisp
   (use-package dap-mode)
   #+end_src

** Python

   #+begin_src emacs-lisp

   (use-package python-mode
     :ensure t
     :hook (python-mode . lsp-deferred)
     :custom
     (python-shell-interpreter "python3"))
     
   ;; Unable to get this to work. Error regarding content returned.
   ;;(use-package lsp-jedi
     ;;:ensure t
     ;;:config
     ;;(with-eval-after-load "lsp-mode"
       ;;(add-to-list 'lsp-disabled-clients 'pyls)
       ;;(add-to-list 'lsp-enabled-clients 'jedi)))

   #+end_src

** Terraform
   #+begin_src emacs-lisp

   (use-package terraform-mode
   :init
   (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))

   #+end_src

** YaSnippets
   #+begin_src emacs-lisp
   
   (use-package yasnippet
   :config
   (yas-reload-all)
   (yas-global-mode))

   (use-package yasnippet-snippets
   :after yasnippet)
   
   #+end_src
* Remaining Items
 
  #+begin_src emacs-lisp
  #+end_src
